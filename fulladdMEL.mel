global proc float TM_rand(){
 	//get random float by maya start time & menory page faults --------01.19.2009.Dontnoun
 	int $rand_range[] = {0,100};		//user define rand range
 	float $crnt_tim = `timerX` ;
 	int $crnt_men_pf = `memory -pf`; // get two random number: maya start time & memory page faults

 	float $TM_rand_a = `sqrt $crnt_tim`;
 	if ($crnt_men_pf < 0) {
        $crnt_men_pf = -$crnt_men_pf;
    }
    float $TM_rand_b = `sqrt $crnt_men_pf`;
 	float $TM_rand = $TM_rand_a*$TM_rand_b;
 	string $buf_rand[];
 	tokenize (string($TM_rand)) "." $buf_rand;
 	$TM_rand = $TM_rand - float($buf_rand[0]);	//remove int part,only keep float
 	$TM_rand = `substring (string($TM_rand)) 3 (size(string($TM_rand)))`;	//get more random number

 	string $mnl_sed = "seed(" + $TM_rand + ");";		eval $mnl_sed;	//set random seed;
 	return (rand ($rand_range[0],$rand_range[1]) );
 }TM_rand;


global proc matrix fulladdMEL()
{
    string $selection[] = `ls -os -fl`;  //grabs objects, puts in order, flattens
    string $faceNames[] = `filterExpand -selectionMask 34 - expand true $selection`; // grabs faces

    string $objectToInstance;

    $selection = stringArrayRemove($faceNames, $selection);

    for ($objectToInstance in $selection){
        if( `objectType $objectToInstance` == "transform" ) {

            int $i = TM_rand();
            string $face = $faceNames[$i];

            //Find bottom of object
            float $bb[] = `getAttr ($objectToInstance + ".boundingBoxMin")`;
            float $cc[] = `objectCenter -gl $objectToInstance`;
            //Gets radius of object
            float $radius = $cc[1] - $bb[1];
            //print($radius);

            string $newInstance[] = `instance $objectToInstance`;
            //getFaceCenter
            vector $vertexPositions[] = `xform -q -ws -t $face`;
            vector $sum = << 0, 0, 0 >>;
            vector $v;

            for( $v in $vertexPositions) {
                $sum = $sum + $v;
            }
            vector $average;
            int $numVertices = size( $vertexPositions);
            $average = $sum / $numVertices;
            vector $position = $average;

            //getFaceNormal
            string $polyInfoResult[] = `polyInfo -fn $face`;
            string $stringToParse = $polyInfoResult[0];
            string $items[];
            int $numTokens = `tokenize $stringToParse " " $items`;
            float $x = ($items[2]);
            float $y = ($items[3]);
            float $z = ($items[4]);
            vector $normal = << $x, $y, $z >>;
            string $parentShape[] = `listRelatives -parent $face`;
            string $parentTransform[] = `listRelatives -parent $parentShape[0]`;
            float $transformMatrix[] = `xform -q -m -ws $parentTransform[0]`;
            vector $worldNormal = `pointMatrixMult $normal $transformMatrix`;
            vector $unitWorldNormal = unit( $worldNormal );
            vector $pNormal = $unitWorldNormal; //this was just normal

            //moveAlign
            string $pObjectName = $newInstance[0];
            //vector $pNormal = $normal;
            vector $pPosition = $position;
            float $factor = (mag($pPosition) + $radius) / mag($pPosition);
            float $negx = 0.0;
            float $negy = 0.0;
            float $negz = 0.0;

            if ($pPosition.x < 0) {
                $negx = ((-$pPosition.x * $factor) + $pPosition.x);
            }
            if ($pPosition.y < 0) {
                $negy = ((-$pPosition.y * $factor) + $pPosition.y);
            }
            if ($pPosition.z < 0) {
                $negz = ((-$pPosition.z * $factor) + $pPosition.z);
            }

            vector $tangent1 = unit( cross( $pNormal, << 0, 1, 0 >>));
            if( mag( $tangent1 ) == 0) {
                $tangent1 = << 1, 0, 0 >>;
            }

            vector $tangent2 = unit( cross( $pNormal, $tangent1 ));
            matrix $m[4][4] = <<
            ($tangent2.x), ($tangent2.y), ($tangent2.z), 0.0;
            ($pNormal.x), ($pNormal.y), ($pNormal.z), 0.0;
            ($tangent1.x), ($tangent1.y), ($tangent1.z), 0.0;
            //this includes change (factor)
            ($pPosition.x * $factor + $negx), ($pPosition.y * $factor + $negy), ($pPosition.z * $factor + $negz), 1.0 >>;

            xform -ws -m
                ($m[0][0]) ($m[0][1]) ($m[0][2]) ($m[0][3])
                ($m[1][0]) ($m[1][1]) ($m[1][2]) ($m[1][3])
                ($m[2][0]) ($m[2][1]) ($m[2][2]) ($m[2][3])
                ($m[3][0]) ($m[3][1]) ($m[3][2]) ($m[3][3]) $pObjectName;

            //float $bb2[] = `getAttr ($pObjectName + ".boundingBoxMin")`;
            //float $cc2[] = `objectCenter -gl $pObjectName`;
            //float $radius2 = $cc2[1] - $bb2[1];
            move -relative -objectSpace -worldSpaceDistance 0 $radius 0 $pObjectName;

            return $m;

        } else {
            print "Please ensure the first object you select is a transform.";
        }
    }
}